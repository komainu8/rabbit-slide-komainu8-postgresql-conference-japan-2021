= PGroongaを使って\n全文検索結果を\nより良くする方法

 : author
    堀本 泰弘
 : institution
    株式会社クリアコード
 : content-source
    PostgreSQL Conference Japan 2021
 : date
    2021-11-12
 : allotted-time
    45m
 : start-time
    2021-11-12T16:10:00+09:00
 : end-time
    2021-11-12T16:55:00+09:00
 : theme
    .

= 自己紹介

  # image
  # src = images/self-introduction.png
  # relative_height = 107

= 今日のテーマ

検索結果の改善

= 目次

(1) 検索の評価指標
(2) PGrooongaで検索結果の改善

= 検索の評価指標

よく検索結果が\n
((*いまいち*))だ...\n
という話を\n聞きます

= 検索の評価指標

  # image
  # src = images/search-result-01.png
  # relative_height = 100

= 検索の評価指標

* 😞検索漏れ
* 😞ノイズが多い
* 😞有用な情報を探し出せない

= 検索の評価指標

検索の評価指標は\n
2種類

= 検索の評価指標

(1) 効率性\n低コストで検索できるかどうか
(2) ((*有効性*))\n検索結果の全体 or 一部が\n((*欲しい情報*))だったかどうか

= 基本的な有効性の指標

(1) 適合率
(2) 再現率
(3) ランキング

= 適合率

  # LaTeX
  # relative_width = 10

  $${ユーザーが欲しいドキュメント}/{検索にヒットしたドキュメント}$$

= 再現率

  # LaTeX
  # relative_width = 10

  $${検索にヒットしたドキュメント}/{ユーザーが欲しいドキュメント}$$

= 適合率と再現率

例) 過去の不具合事例の検索

PGroongaでNormalizeのオプションA,Bを使うと期待した結果にならない。

PGroonga NormalizerNFKC130 A BでRedmineを検索

☓ PGroonga NormalizerNFKC130 A_v_sounds B
☓ PGroonga NormalizerNFKC130 A_bu_sounds B
○ PGroonga NormalizerNFKC130 A B
○ Groonga NormalizerNFKC130 A B(HITせず)

= 再現率の注意点

Web検索のような検索対象が膨大な場合は
再現率という指標はあまり意味がない。

関連する情報がどのくらいヒットしているかには
興味がない。

こういう場合は適合率が重要。

一方で、検索漏れがあっては困る領域では重要。
例えば、特許の検索であったり、裁判の判例の検索であったり。

= ランキング

欲しい情報が\nランキング((*上位*))にあるか

= ランキング

ユーザーは\n((*上位数件*))\nしか見ない

= PGroongaで検索結果の改善

* PGroongaで適合率/再現率改善

  * ノーマライザーを使う
  * トークナイザーを使う
  * ステミングを使う
  * fuzzy検索を使う
  * 同義語展開を使う

= PGroongaで検索結果の改善

* PGroongaでランキング改善

  * スコアラーを使う

= PGroongaのノーマライザー\n(デフォルト)

ノーマライザー\n
(同一視)

= PGroongaのノーマライザー\n(デフォルト)

  # coderay sql

    CREATE DATABASE pgroonga_test;
    CREATE EXTENSION pgroonga;
    CREATE TABLE normalizer_test (
      id integer,
      content text
    );
    CREATE INDEX pgroonga_content_index ON normalizer_test USING pgroonga (content);

    INSERT INTO normalizer_test VALUES (1, 'キログラム');
    INSERT INTO normalizer_test VALUES (2, 'きろぐらむ');
    INSERT INTO normalizer_test VALUES (3, '㌕');
    INSERT INTO normalizer_test VALUES (4, 'ｷﾛｸﾞﾗﾑ');
    INSERT INTO normalizer_test VALUES (5, 'kiroguramu');
    INSERT INTO normalizer_test VALUES (6, 'ｋｉｒｏｇｕｒａｍｕ');

    SELECT * FROM normalizer_test WHERE content &@ 'キログラム';

= PGroongaのノーマライザー\n(デフォルト)

  # RT
  delimiter = [|]

  id | content

  1 | キログラム
  3 | ㌕
  4 | ｷﾛｸﾞﾗﾑ

= PGroongaのノーマライザー\n(デフォルト)

* 半角/全角を同一視
* ㌕とキログラムを同一視

= PGroongaのノーマライザー\n(デフォルト)

PGroongaのデフォルトはNFKCを使った正規化\n
※対象のテキストのエンコードがUTF-8の時

= ノーマライザーの変更

再現率を上げたい

= PGroongaのノーマライザー\n(NormalizerNFKC130)

  # coderay sql

    DROP INDEX pgroonga_content_index;
  CREATE INDEX pgroonga_content_index
            ON normalizer_test
         USING pgroonga (content)
          WITH (normalizers='NormalizerNFKC130("unify_to_romaji", true)');
  SELECT * FROM normalizer_test WHERE content &@ 'キログラム';

= PGroongaのノーマライザー\n(NormalizerNFKC130)

  # RT
  delimiter = [|]

  id | content

  1 | キログラム
  2 | きろぐらむ
  3 | ㌕
  4 | ｷﾛｸﾞﾗﾑ

= PGroongaのノーマライザー\n(NormalizerNFKC130)

  # RT
  delimiter = [|]

  id | content

  5 | kiroguramu
  6 | ｋｉｒｏｇｕｒａｍｕ

= PGroongaのノーマライザー\n(NormalizerNFKC130)

* Unify_to_romaji

  * ローマ字に正規化\nローマ字で読んだときに同じ語は同一視する
  * (e.g. 「kiroguramu」と「きろぐらむ」を同一視。ローマ字読みが同じだから)

= オプションの指定方法

* 'NormalizerNFKC130\n("オプション名", true)');

= 複数オプションの指定方法

'NormalizerNFKC130(\n
"オプション名", true,\n
"オプション名", true,\n
...)');

= 指定可能オプション一覧

* NormalizerNFKC130の\nオプション一覧
  * ((<URL:https://groonga.org/ja/docs/reference/normalizers/normalizer_nfkc130.html#syntax>))

= PGroongaのトークナイザー\n(デフォルト)

  # coderay sql

    CREATE TABLE tokenizer_test (
      title text
    );
    CREATE INDEX pgroonga_content_index ON tokenizer_test USING pgroonga (title);

    INSERT INTO tokenizer_test VALUES ('京都府 1日目 金閣寺');
    INSERT INTO tokenizer_test VALUES ('京都府 2日目 嵐山');
    INSERT INTO tokenizer_test VALUES ('京都府 3日目 天橋立');
    INSERT INTO tokenizer_test VALUES ('東京都 1日目 スカイツリー');
    INSERT INTO tokenizer_test VALUES ('東京都 2日目 浅草寺');
    INSERT INTO tokenizer_test VALUES ('北海道 1日目 函館');
    INSERT INTO tokenizer_test VALUES ('北海道 2日目 トマム');
    INSERT INTO tokenizer_test VALUES ('北海道 3日目 富良野');
    INSERT INTO tokenizer_test VALUES ('北海道 4日目 美瑛');
    INSERT INTO tokenizer_test VALUES ('北海道 5日目 旭川');

    SELECT * FROM tokenizer_test WHERE title &@ '京都';

= PGroongaのトークナイザー\n(デフォルト)

  # RT
  delimiter = [|]

  title

  京都府 1日目 金閣寺
  京都府 2日目 嵐山
  京都府 3日目 天橋立
  東京都 1日目 スカイツリー
  東京都 2日目 浅草寺

= トークナイザーの変更

適合率を上げたい

= PGroongaのトークナイザー\n(TokenMecab)

  # coderay sql

    DROP INDEX pgroonga_content_index;
  CREATE INDEX pgroonga_content_index
            ON tokenizer_test
         USING pgroonga (title)
          WITH (tokenizer='TokenMecab');

  SELECT * FROM tokenizer_test WHERE title &@ '京都';

= PGroongaのトークナイザー\n(TokenMecab)

  # RT
  delimiter = [|]

  title

  京都府 1日目 金閣寺
  京都府 2日目 嵐山
  京都府 3日目 天橋立

= トークナイザーの指定方法

* tokenizer='トークナイザー名'

= 指定可能トークナイザー一覧

* 使用可能なトークナイザー
  * ((<URL:https://groonga.org/ja/docs/reference/tokenizers.html>))

= ステミング(語幹処理)

語形変化\n意味は同じだが\n語の形が変わる

= ステミング(語幹処理)

例えば

* develop(原形)
* developped(過去形)
* developing(進行形)

意味は同じだが語形は異なる

= ステミング(語幹処理)

語幹：単語の変化しない部分

= ステミング(語幹処理)

(('tag:left'))
((*develop*))\n
((*develop*))ped\n
((*develop*))ing

= ステミング(語幹処理)

語幹で検索\n
->語形変化後の語も検索できる

= PGroongaのステミング\n(未使用)

  # coderay sql

    CREATE TABLE steming_test (
      title text
    );
    CREATE INDEX pgroonga_content_index ON steming_test USING pgroonga (title);

    INSERT INTO tokenizer_test VALUES ('I develop Groonga');
    INSERT INTO tokenizer_test VALUES ('I am developing Groonga');
    INSERT INTO tokenizer_test VALUES ('I developed Groonga');

    SELECT * FROM tokenizer_test WHERE title &@ 'develop';

= PGroongaのステミング\n(未使用)

  # RT
  delimiter = [|]

  title

  I develop Groonga

= PGroongaのステミング

  # coderay sql

    CREATE INDEX pgroonga_content_index
              ON steming_test
           USING pgroonga (title)
            WITH (plugins='token_filters/stem',
                  token_filters='TokenFilterStem');

= PGroongaのステミング

  # RT
  delimiter = [|]

  title

  I develop Groonga
  I am developing Groonga
  I developed Groonga

= ステミングの使用方法

= 同義語

同義語：同じ意味を持つ別の語

= 同義語

例えば\n
「ミルク」と\n「牛乳」

= 同義語

意味が同じものはヒットしてほしい

= 同義語展開

ミルク -> \n
ミルク OR 牛乳

= PGroongaの同義語展開

  # coderay sql

    CREATE TABLE synonyms (
      term text PRIMARY KEY,
      synonyms text[]
    );

    CREATE INDEX synonyms_search ON synonyms USING pgroonga (term pgroonga.text_term_search_ops_v2);

    INSERT INTO synonyms (term, synonyms) VALUES ('ミルク', ARRAY['ミルク', '牛乳']);
    INSERT INTO synonyms (term, synonyms) VALUES ('牛乳', ARRAY['牛乳', 'ミルク']);

    CREATE TABLE memos (
      id integer,
      content text
    );

    INSERT INTO memos VALUES (1, '牛乳石鹸');
    INSERT INTO memos VALUES (2, 'ミルクジャム');
    INSERT INTO memos VALUES (3, 'ストロベリー');

    CREATE INDEX pgroonga_content_index ON memos USING pgroonga (content);

    SELECT * FROM memos
      WHERE
        content &@~
          pgroonga_query_expand('synonyms', 'term', 'synonyms', '牛乳');

= 同義語展開

  # RT
  delimiter = [|]

  id | content

  1 | 牛乳石鹸
  2 | ミルクジャム

= 同義語展開の使い方

= 曖昧検索

typo対策

= 曖昧検索

* 似たような語ならヒットする
(完全一致じゃなくてもヒットする)

= 曖昧検索

「テノクロジー」で\n
「テクノロジー」がヒット

= PGroongaのfuzzy検索

  # coderay sql

    CREATE TABLE tags (
      name text
    );

    CREATE INDEX tags_search ON tags USING pgroonga(name) WITH (tokenizer='');
    INSERT INTO tags VALUES ('テクノロジー');
    INSERT INTO tags VALUES ('テクニカル');

    SELECT name FROM tags
      WHERE
        name &`
          ('fuzzy_search(name, ' || pgroonga_escape('テノクロジー') || ',
                         {"with_transposition": true,
                          "max_distance": 1})');

= 曖昧検索

  # RT
  delimiter = [|]

  name

  テクノロジー

= 曖昧検索の使い方


= 高度な話題

処理順序

(1) ノーマライズ
(2) トークナイズ
(3) トークンフィルター

= 高度な話題

例)

= 高度な話題

トークナイズ後にノーマライズしたい場合

= 高度な話題

トークンフィルターでノーマライズ

= 高度な話題

処理順序

(1) ノーマライズ
(2) トークナイズ
(3) ((*トークンフィルター*))

= 高度な話題

TokenFilterNFKC100を使う

* 動作は、NormalizerNFKC130と同じ
* オプションも同じ

= PGroongaでランキング改善

何を基準に\nランキングを\n決めるのか

= PGroongaのスコアー

スコアー

= PGroongaのスコアリング

* TF(PGroongaのデフォルト)
* TF-IDF

= PGroongaのスコアリング\nTF(デフォルト)

単語の((*出現数*))\nが大事

= PGroongaのスコアリング\nTF(デフォルト)

* 検索キーワードが文書内に多く含まれる文書のスコアーが高くなる

= PGroongaのスコアリング\nTF-IDF

単語の((*レア度*))\nが大事

= PGroongaのスコアリング\nTF-IDF

* 文書に出てくる頻度が高い\n(レア度低い)
* 文書に出てくる頻度が低い\n(レア度高い)

= PGroongaのスコアリング\nTF-IDF

  # coderay sql

    CREATE TABLE memos (
      title text,
      content text
    );

    CREATE INDEX pgroonga_memos_index
        ON memos
     USING pgroonga (content);
    INSERT INTO memos VALUES ('PostgreSQL', 'PostgreSQLはリレーショナル・データベース管理システムです。');
    INSERT INTO memos VALUES ('Groonga', 'Groongaは日本語対応の高速な全文検索エンジンです。');
    INSERT INTO memos VALUES ('PGroonga', 'PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です。');
    INSERT INTO memos VALUES ('コマンドライン', 'groongaコマンドがあります。');

    SELECT *, pgroonga_score(tableoid, ctid) AS score
      FROM memos
     WHERE content &@~
       ('PostgreSQL OR 検索',
        ARRAY[1],
        ARRAY['scorer_tf_idf($index)'],
        'pgroonga_memos_index')::pgroonga_full_text_search_condition_with_scorers
     ORDER BY score DESC;

= PGroongaのスコアリング\nTF-IDF

(要確認)
  # RT
  delimiter = [|]

  title | score

  PGroonga    | 1.3862943649291992
  PostgreSQL | 1
  Groonga   | 1

= 参考資料

* PGroonga自体の解説

  * ((<URL:https://www.slideshare.net/kou/postgresql-conference-japan-2017>))

= 参考資料

* ノーマライザーのオプション一覧

  * ((<URL:https://groonga.org/ja/docs/reference/normalizers/normalizer_nfkc130.html#parameters>))

= 参考資料

* 使用可能なトークナイザー一覧

　* ((<URL:https://groonga.org/ja/docs/reference/tokenizers.html>))

= 参考資料

* 同義語検索の方法

  * ((<URL:https://pgroonga.github.io/ja/how-to/synonyms.html>))

= 参考資料

* 使用可能なスコアラー一覧
  * ((<URL:https://groonga.org/ja/docs/reference/scorer.html#built-in-scorers>))


